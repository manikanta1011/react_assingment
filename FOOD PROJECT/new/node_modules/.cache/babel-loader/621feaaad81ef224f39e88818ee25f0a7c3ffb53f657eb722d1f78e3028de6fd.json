{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Documents\\\\FOOD PROJECT\\\\new\\\\src\\\\task\\\\Verify.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n//  import './Verify.css'\n\n// const Verify = () => {\n//   const inputs = [1, 2, 3, 4];\n\n//   return (\n//     <div className=\"simple-verification-container\">\n\n//       <h1>Verification Code</h1>\n//       <p className=\"er\">Please type the verification code sent to your email@example.com</p>\n//       <div className=\"simple-code-inputs\">\n//         {inputs.map((_, index) => (\n//           <input\n//             key={index}\n//             className=\"simple-code-input\"\n//             type=\"text\"\n//             maxLength=\"1\"\n//             placeholder=\"•\"\n//           />\n//         ))}\n//       </div>\n//       <p className=\"simple-resend-text\">\n//         I don’t receive a code!{\" \"}\n//         <span className=\"simple-resend-link\">Please resend</span>\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default Verify;\n\nimport React, { useState, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport './Verify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Verify = () => {\n  _s();\n  const [code, setCode] = useState([\"\", \"\", \"\", \"\"]); // State for 4 input values\n  const inputRefs = useRef([]); // References to each input field\n  const navigate = useNavigate();\n  const handleChange = (value, index) => {\n    if (value.length > 1) return; // Allow only single character\n\n    const newCode = [...code];\n    newCode[index] = value;\n    setCode(newCode);\n    if (value && index < code.length - 1) {\n      inputRefs.current[index + 1].focus();\n    }\n    if (index === code.length - 1 && value) {\n      navigate(\"/register\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-verification-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Verification Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"kk\",\n      children: \"Please type the verification code sent to your email@example.com\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simple-code-inputs\",\n      children: code.map((char, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: el => inputRefs.current[index] = el // Attach ref to each input\n        ,\n        type: \"text\",\n        maxLength: \"1\",\n        value: char,\n        className: \"simple-code-input\",\n        onChange: e => handleChange(e.target.value, index),\n        placeholder: \"\\u2022\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"simple-resend-text\",\n      children: [\"I don\\u2019t receive a code! \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"simple-resend-link\",\n        children: \"Please resend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Verify, \"HfxRqpdRwBaWeWJnecQGjFda7QA=\", false, function () {\n  return [useNavigate];\n});\n_c = Verify;\nexport default Verify;\nvar _c;\n$RefreshReg$(_c, \"Verify\");","map":{"version":3,"names":["React","useState","useRef","useNavigate","jsxDEV","_jsxDEV","Verify","_s","code","setCode","inputRefs","navigate","handleChange","value","index","length","newCode","current","focus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","char","ref","el","type","maxLength","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/dell/Documents/FOOD PROJECT/new/src/task/Verify.jsx"],"sourcesContent":["// import React from \"react\";\r\n//  import './Verify.css'\r\n\r\n// const Verify = () => {\r\n//   const inputs = [1, 2, 3, 4];\r\n \r\n//   return (\r\n//     <div className=\"simple-verification-container\">\r\n      \r\n//       <h1>Verification Code</h1>\r\n//       <p className=\"er\">Please type the verification code sent to your email@example.com</p>\r\n//       <div className=\"simple-code-inputs\">\r\n//         {inputs.map((_, index) => (\r\n//           <input\r\n//             key={index}\r\n//             className=\"simple-code-input\"\r\n//             type=\"text\"\r\n//             maxLength=\"1\"\r\n//             placeholder=\"•\"\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//       <p className=\"simple-resend-text\">\r\n//         I don’t receive a code!{\" \"}\r\n//         <span className=\"simple-resend-link\">Please resend</span>\r\n//       </p>\r\n//     </div>\r\n//   );\r\n// };\r\n \r\n// export default Verify;\r\n\r\n\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport './Verify.css';\r\n\r\nconst Verify = () => {\r\n  const [code, setCode] = useState([\"\", \"\", \"\", \"\"]); // State for 4 input values\r\n  const inputRefs = useRef([]); // References to each input field\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (value, index) => {\r\n    if (value.length > 1) return; // Allow only single character\r\n\r\n    const newCode = [...code];\r\n    newCode[index] = value;\r\n    setCode(newCode);\r\n\r\n   \r\n    if (value && index < code.length - 1) {\r\n      inputRefs.current[index + 1].focus();\r\n    }\r\n\r\n    \r\n    if (index === code.length - 1 && value) {\r\n      navigate(\"/register\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"simple-verification-container\">\r\n      <h1>Verification Code</h1>\r\n      <p className=\"kk\">Please type the verification code sent to your email@example.com</p>\r\n      <div className=\"simple-code-inputs\">\r\n        {code.map((char, index) => (\r\n          <input\r\n            key={index}\r\n            ref={(el) => (inputRefs.current[index] = el)} // Attach ref to each input\r\n            type=\"text\"\r\n            maxLength=\"1\"\r\n            value={char}\r\n            className=\"simple-code-input\"\r\n            onChange={(e) => handleChange(e.target.value, index)}\r\n            placeholder=\"•\"\r\n          />\r\n        ))}\r\n      </div>\r\n      <p className=\"simple-resend-text\">\r\n        I don’t receive a code! <span className=\"simple-resend-link\">Please resend</span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Verify;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}